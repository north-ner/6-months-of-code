1. You are given a number n, representing the count of elements.
2. You are given n numbers.
3. You are given a number "tar".
4. Complete the body of printTargetSumSubsets function - without changing signature - to calculate and print all subsets of given elements, the contents of which sum to "tar". Use sample input and output to get more idea.

Note -> The online judge can't force you to write the function recursively but that is what the spirit of question is. Write recursive and not iterative logic. The purpose of the question is to aid learning recursion and not test you.


Sample Input
5
10
20
30
40
50
60

OP 
10, 20, 30, .
10, 50, .
20, 40, .


import java.io.*;
import java.util.*;

public class Main {

  public static void main(String[] args) throws Exception {
    Scanner scn = new Scanner(System.in);
    int n = scn.nextInt();

    int [] arr = new int[n];
    for (int i = 0; i < n; i++) {
      arr[i] = scn.nextInt();
    }
    int target = scn.nextInt();
    printTargetSumSubsets(arr, 0, "", 0, target);

  }

  // set is the subset
  // sos is sum of subset
  // tar is target
  public static void printTargetSumSubsets(int[] arr, int idx, String output, int curSum, int tarSum) {

    if (idx == arr.length) {
      if (curSum == tarSum) {
        System.out.println(output + ".");
      }
      return;
    }

    ///pruning to avoid TLE error
    if (curSum > tarSum) {
      return;

    }


    //first char
    int ele = arr[idx];

    //1. interger present in subset

    printTargetSumSubsets(arr, idx + 1, output + ele + ", ", curSum + ele, tarSum);

    //2.interger not preseent in subset
    printTargetSumSubsets(arr, idx + 1, output, curSum, tarSum);

  }

}

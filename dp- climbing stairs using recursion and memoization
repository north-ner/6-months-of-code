1. You are given a number n, representing the number of stairs in a staircase.
2. You are on the 0th step and are required to climb to the top.
3. In one move, you are allowed to climb 1, 2 or 3 stairs.
4. You are required to print the number of different paths via which you can climb to the top.





import java.io.*;
import java.util.*;

public class Main {

    public static void main(String[] args) throws Exception {
        // write your code here
        Scanner scn=new Scanner(System.in);
        int n=scn.nextInt();
        System.out.println(stairs(0,n));
        int[]dp=new int[n+1];
        Arrays.fill(dp,-1);
        System.out.println(memo(0,n,dp));
        
    }
//using recursion..................................
    public static int stairs(int src,int dest){
        if(src>dest){
            return 0;
            }
        if(src==dest){
            return 1;
        }
        
        int x=stairs(src+1,dest);
        int y=stairs(src+2,dest);
        int z=stairs(src+3,dest);
        
        int totalPaths=x+y+z;
        return totalPaths;
        
        //time complexity = O(3^n)
        //because we are giving 3 calls from every function
    }
    
//using memeization backtractking........................................


    public static int memo(int src,int dest,int[]dp){
        
                if(src>dest){
            return 0;
            }
        if(src==dest){
            return 1;
        }
        if(dp[src]!=-1){
            return dp[src];
        }
        int x=memo(src+1,dest,dp);
        int y=memo(src+2,dest,dp);
        int z=memo(src+3,dest,dp);
        int totalStep=x+y+z;
        dp[src]=totalStep;
        return totalStep;
    }

}
